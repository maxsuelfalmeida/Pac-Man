package elements;

import engine.Graph;
import engine.Point;
import java.util.ArrayList;
import javafx.geometry.Rectangle2D;
import javafx.scene.image.Image;

/**
 * Represents the board of the game.
 * 
 * @author Maxsuel F. de Almeida
 */
public class Board extends Element {
    
    
    public char[][] maze;
    public ArrayList<Cell> cells;
    private final Graph mazeGraph;
    
    
    /**
     * Default constructor.
     * @param image The background.
     */
    public Board(Image image)
    {
        super(0, 0, 0, image);
        
        // Create the maze array.
        this.maze = new char[][]{{'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'}, 
                                 {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'}, 
                                 {'#', '.', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '.', '#'},
                                 {'#', 'O', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '#', '#', 'O', '#'},
                                 {'#', '.', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '.', '#'},
                                 {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'},
                                 {'#', '.', '#', '#', '#', '#', '.', '#', '#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '.', '#', '#', '.', '#', '#', '#', '#', '.', '#'},
                                 {'#', '.', '#', '#', '#', '#', '.', '#', '#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '.', '#', '#', '.', '#', '#', '#', '#', '.', '#'},
                                 {'#', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '#'},
                                 {'#', '#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#', ' ', '#', '#', ' ', '#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#', '#'},
                                 {'#', '#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#', ' ', '#', '#', ' ', '#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#', '#'},
                                 {'#', '#', '#', '#', '#', '#', '.', '#', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '#', '.', '#', '#', '#', '#', '#', '#'},
                                 {'#', '#', '#', '#', '#', '#', '.', '#', '#', ' ', '#', '#', '#', '*', '*', '#', '#', '#', ' ', '#', '#', '.', '#', '#', '#', '#', '#', '#'},
                                 {'#', '#', '#', '#', '#', '#', '.', '#', '#', ' ', '#', '*', '*', '*', '*', '*', '*', '#', ' ', '#', '#', '.', '#', '#', '#', '#', '#', '#'},
                                 {' ', ' ', ' ', ' ', ' ', ' ', '.', ' ', ' ', ' ', '#', '*', '*', '*', '*', '*', '*', '#', ' ', ' ', ' ', '.', ' ', ' ', ' ', ' ', ' ', ' '},
                                 {'#', '#', '#', '#', '#', '#', '.', '#', '#', ' ', '#', '*', '*', '*', '*', '*', '*', '#', ' ', '#', '#', '.', '#', '#', '#', '#', '#', '#'},
                                 {'#', '#', '#', '#', '#', '#', '.', '#', '#', ' ', '#', '#', '#', '#', '#', '#', '#', '#', ' ', '#', '#', '.', '#', '#', '#', '#', '#', '#'},
                                 {'#', '#', '#', '#', '#', '#', '.', '#', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '#', '.', '#', '#', '#', '#', '#', '#'},
                                 {'#', '#', '#', '#', '#', '#', '.', '#', '#', ' ', '#', '#', '#', '#', '#', '#', '#', '#', ' ', '#', '#', '.', '#', '#', '#', '#', '#', '#'},
                                 {'#', '#', '#', '#', '#', '#', '.', '#', '#', ' ', '#', '#', '#', '#', '#', '#', '#', '#', ' ', '#', '#', '.', '#', '#', '#', '#', '#', '#'},
                                 {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'},
                                 {'#', '.', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '.', '#'},
                                 {'#', '.', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '.', '#', '#', '#', '#', '#', '.', '#', '#', '#', '#', '.', '#'},
                                 {'#', 'O', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '.', ' ', ' ', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', 'O', '#'},
                                 {'#', '#', '#', '.', '#', '#', '.', '#', '#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '.', '#', '#', '.', '#', '#', '.', '#', '#', '#'},
                                 {'#', '#', '#', '.', '#', '#', '.', '#', '#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '.', '#', '#', '.', '#', '#', '.', '#', '#', '#'},
                                 {'#', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.', '#'},
                                 {'#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '#', '#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '#'},
                                 {'#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '#', '#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '#'},
                                 {'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'},
                                 {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'}};
        
        // Create the maze graph.
        mazeGraph = new Graph();
        Point p = new Point(0, 0);
        for(int i = 1; i < maze.length - 1; i++) 
        {
            for(int j = 1; j < maze[0].length - 1; j++) 
            {
                if(maze[i][j] == '.' || maze[i][j] == 'O' || maze[i][j] == ' ') 
                {   
                    p.setX(i);
                    p.setY(j);
                    if(maze[i-1][j] == '.' || maze[i-1][j] == 'O' || maze[i-1][j] == ' ')
                        mazeGraph.addEdge(p, new Point(i-1, j));
                    if(maze[i+1][j] == '.' || maze[i+1][j] == 'O' || maze[i+1][j] == ' ')
                        mazeGraph.addEdge(p, new Point(i+1, j));
                    if(maze[i][j-1] == '.' || maze[i][j-1] == 'O' || maze[i][j-1] == ' ')
                        mazeGraph.addEdge(p, new Point(i, j-1));
                    if(maze[i][j+1] == '.' || maze[i][j+1] == 'O' || maze[i][j+1] == ' ')
                        mazeGraph.addEdge(p, new Point(i, j+1));    
                }
            }
        }
        
        // Create the cells
        cells = new ArrayList<>();
        for(int i = 0; i < maze.length; i++)
        {
            for(int j = 0; j < maze[0].length; j++)
            {
                cells.add(new Cell(i, j));
            }
        }
        
    }
    
    @Override
    public void update()
    {
        
    }
    
    
}
